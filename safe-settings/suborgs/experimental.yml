# This settings file can be used to create suborg-level settings.

# List of repos that belong to the suborg.
# You can use Glob patterns.
suborgrepos:
  # - workflows # TODO: Uncomment after testing on md-tasks-notify.
  - md-tasks-notify

# Every other property is the same as the org level settings and can be overridden here.
repository:

  # Settings for Code security and analysis
  # Dependabot Alerts
  security:
    enableVulnerabilityAlerts: true
    enableAutomatedSecurityFixes: true

  # Either `true` to enable projects for this repository, or `false` to disable them.
  has_projects: false

  # Either `true` to enable the wiki for this repository, `false` to disable it.
  has_wiki: false

  # Either `true` to allow squash-merging pull requests, or `false` to prevent
  # squash-merging.
  allow_squash_merge: true
  squash_merge_commit_title: PR_TITLE
  squash_merge_commit_message: PR_BODY

  # Either `true` to allow merging pull requests with a merge commit, or `false`
  # to prevent merging pull requests with merge commits.
  allow_merge_commit: false

  # Either `true` to allow rebase-merging pull requests, or `false` to prevent
  # rebase-merging.
  allow_rebase_merge: false

  # Either `true` to allow auto-merge on pull requests,
  # or `false` to disallow auto-merge.
  # Default: `false`
  allow_auto_merge: null

  # Either `true` to allow automatically deleting head branches
  # when pull requests are merged, or `false` to prevent automatic deletion.
  # Default: `false`
  delete_branch_on_merge: true

  # Either `true` to  allow update branch on pull requests,
  # or `false` to disallow update branch.
  # Default: `false`
  allow_update_branch: null

# Rulesets.
# See https://docs.github.com/en/rest/orgs/rules?apiVersion=2022-11-28#create-an-organization-repository-ruleset
# for available options.
rulesets:
  - name: default branch
    # The target of the ruleset. Can be one of:
    # - branch
    # - tag
    target: branch
    # The enforcement level of the ruleset. `evaluate` allows admins to test
    # rules before enforcing them.
    # - disabled
    # - active
    # - evaluate
    enforcement: active

    # The actors that can bypass the rules in this ruleset
    bypass_actors:
      - actor_id: null
        # type: The type of actor that can bypass a ruleset
        # - RepositoryRole
        # - Team
        # - Integration
        # - OrganizationAdmin
        actor_type: RepositoryRole
        #  When the specified actor can bypass the ruleset. `pull_request`
        #  means that an actor can only bypass rules on pull requests.
        #  - always
        #  - pull_request
        bypass_mode: always

    # - actor_id: 1
    #   actor_type: OrganizationAdmin
    #   bypass_mode: always
    #
    # - actor_id: 7898
    #   actor_type: RepositoryRole
    #   bypass_mode: always
    #
    # - actor_id: 210920
    #   actor_type: Integration
    #   bypass_mode: always

    conditions:
      # Parameters for a repository ruleset ref name condition
      ref_name:
        # Array of ref names or patterns to include. One of these
        # patterns must match for the condition to pass. Also accepts
        # `~DEFAULT_BRANCH` to include the default branch or `~ALL` to
        # include all branches.
        include: ["~DEFAULT_BRANCH"]

        # Array of ref names or patterns to exclude. The condition
        # will not pass if any of these patterns match.
        # exclude: ["refs/heads/oldmaster"]

    # Refer to https://docs.github.com/en/rest/orgs/rules#create-an-organization-repository-ruleset
    rules:
      # - type: creation
      # - type: update
      #   parameters:
      #     # Branch can pull changes from its upstream repository
      #     update_allows_fetch_and_merge: true
      - type: deletion
      # - type: required_linear_history
      # - type: required_signatures
      #
      # - type: required_deployments
      #   parameters:
      #     required_deployment_environments: ["staging"]

      - type: pull_request
        parameters:
          # Array of allowed merge methods.
          # Allowed values include merge, squash, and rebase.
          # At least one option must be enabled.
          allowed_merge_methods: ['squash']
          # Reviewable commits pushed will dismiss previous pull
          # request review approvals.
          dismiss_stale_reviews_on_push: false
          # Require an approving review in pull requests that modify
          # files that have a designated code owner
          require_code_owner_review: false
          # Whether the most recent reviewable push must be approved
          # by someone other than the person who pushed it.
          require_last_push_approval: false
          # The number of approving reviews that are required before a
          # pull request can be merged.
          required_approving_review_count: 0
          # All conversations on code must be resolved before a pull
          # request can be merged.
          required_review_thread_resolution: false

      # Choose which status checks must pass before branches can be merged
      # into a branch that matches this rule. When enabled, commits must
      # first be pushed to another branch, then merged or pushed directly
      # to a branch that matches this rule after status checks have
      # passed.
      - type: required_status_checks
        parameters:
          # Whether pull requests targeting a matching branch must be
          # tested with the latest code. This setting will not take
          # effect unless at least one status check is enabled.
          strict_required_status_checks_policy: true
          required_status_checks:
            - context: "{{EXTERNALLY_DEFINED}}"

    # Choose which workflows must pass before branches can be merged.
    # - type: workflows
    #   parameters:
    #     workflows:
    #       - path: .github/workflows/example.yml
    #         # Run $("meta[name=octolytics-dimension-repository_id]").getAttribute('content')
    #         # in the browser console of the repository to get the repository_id
    #         repository_id: 123456
    #         # One of the following:
    #         # Branch or tag
    #         ref: refs/heads/main
    #         # Commit SHA
    #         sha: 1234567890abcdef
    #
    # - type: commit_message_pattern
    #   parameters:
    #     name: test commit_message_pattern
    #     # required:
    #     #  - operator
    #     #  - pattern
    #     negate: true
    #     operator: starts_with
    #     # The operator to use for matching.
    #     # - starts_with
    #     # - ends_with
    #     # - contains
    #     # - regex
    #     pattern: skip*
    #     # The pattern to match with.
    #
    # - type: commit_author_email_pattern
    #   parameters:
    #     name: test commit_author_email_pattern
    #     negate: false
    #     operator: regex
    #     pattern: "^.*@example.com$"
    #
    # - type: committer_email_pattern
    #   parameters:
    #     name: test committer_email_pattern
    #     negate: false
    #     operator: regex
    #     pattern: "^.*@example.com$"
    #
    # - type: branch_name_pattern
    #   parameters:
    #     name: test branch_name_pattern
    #     negate: false
    #     operator: regex
    #     pattern: ".*\/.*"
    #
    # - type: "tag_name_pattern"
    #   parameters:
    #     name: test tag_name_pattern
    #     negate: false
    #     operator: regex
    #     pattern: ".*\/.*"

